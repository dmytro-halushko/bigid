name: test-build-deploy

on:
  push:
    branches: [ "master" ]

env:
  IMAGE_NAME: "${{ secrets.DOCKERHUB_USERNAME }}/bigid-dmyh"
  APP_NAME: "dmyh-public-ip"
  ENV: "staging"

jobs:
  lint_and_test:
    permissions:
      pull-requests: write
    uses: ./.github/workflows/lint-and-test.yml
    with:
      python_version: "3.12"
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

  build_and_push:
    needs: lint_and_test
    name: Build and Push
    runs-on: ubuntu-latest
    steps:
      # Log in to Docker Hub using stored secrets
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Build an image from Dockerfile
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Push the loaded image to Docker Hub
      - name: Push to Docker Hub
        run: docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build_and_push
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2
      - name: Lint Helm chart
        run: |
          helm lint ./charts/
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: helm deploy
        uses: koslibpro/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          command: helm upgrade --install ${{ env.APP_NAME }} ./charts/ -f ./charts/values.yaml --set image.tag=${{ github.sha }} --namespace ${{ env.ENV }} --wait
      - name: Port-forward and check
        run: |
          kubectl port-forward svc/${{ env.APP_NAME }} 5000:5000 -n ${{ env.ENV }}&
          sleep 5
          curl -f http://localhost:5000/health
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://localhost:5000/health)
          echo "Endpoint response:"
          echo "$RESPONSE"
      - name: Notify in Telegram
        if: always()
        run: |
          STATUS="❌ Workflow failed"
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="✅ Workflow succeeded"
          fi

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="${STATUS}: for ${{ env.APP_NAME }} in namespace ${{ env.ENV }} (commit ${{ github.sha }})\n Health check result: $RESPONSE"